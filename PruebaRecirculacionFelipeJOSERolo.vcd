$date
	Tue May 25 00:17:54 2021
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module BancoPruebaRecirculacion $end
$var wire 1 ! validIn $end
$var wire 8 " data_Probador3 [7:0] $end
$var wire 8 # data_Probador2 [7:0] $end
$var wire 8 $ data_Probador1 [7:0] $end
$var wire 8 % data_Probador0 [7:0] $end
$var wire 8 & data_Mux3 [7:0] $end
$var wire 8 ' data_Mux2 [7:0] $end
$var wire 8 ( data_Mux1 [7:0] $end
$var wire 8 ) data_Mux0 [7:0] $end
$var wire 8 * In3 [7:0] $end
$var wire 8 + In2 [7:0] $end
$var wire 8 , In1 [7:0] $end
$var wire 8 - In0 [7:0] $end
$scope module ParteRecirculacion $end
$var wire 1 ! validIn $end
$var wire 8 . In3 [7:0] $end
$var wire 8 / In2 [7:0] $end
$var wire 8 0 In1 [7:0] $end
$var wire 8 1 In0 [7:0] $end
$var reg 8 2 data_Probador0 [7:0] $end
$var reg 8 3 data_Probador1 [7:0] $end
$var reg 8 4 data_Probador2 [7:0] $end
$var reg 8 5 data_Probador3 [7:0] $end
$var reg 8 6 data_mux0 [7:0] $end
$var reg 8 7 data_mux1 [7:0] $end
$var reg 8 8 data_mux2 [7:0] $end
$var reg 8 9 data_mux3 [7:0] $end
$upscope $end
$scope module prob $end
$var wire 8 : data_Mux0 [7:0] $end
$var wire 8 ; data_Mux1 [7:0] $end
$var wire 8 < data_Mux2 [7:0] $end
$var wire 8 = data_Mux3 [7:0] $end
$var wire 8 > data_Probador0 [7:0] $end
$var wire 8 ? data_Probador1 [7:0] $end
$var wire 8 @ data_Probador2 [7:0] $end
$var wire 8 A data_Probador3 [7:0] $end
$var reg 8 B In0 [7:0] $end
$var reg 8 C In1 [7:0] $end
$var reg 8 D In2 [7:0] $end
$var reg 8 E In3 [7:0] $end
$var reg 1 F clk $end
$var reg 1 ! validIn $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
bx )
bx (
bx '
bx &
b0 %
b0 $
b0 #
b0 "
0!
$end
#200
b1 &
b1 9
b1 =
b1 '
b1 8
b1 <
b1 (
b1 7
b1 ;
b1 )
b1 6
b1 :
b1 *
b1 .
b1 E
b1 +
b1 /
b1 D
b1 ,
b1 0
b1 C
b1 -
b1 1
b1 B
1!
1F
#400
0F
#600
b10 "
b10 5
b10 A
b10 #
b10 4
b10 @
b10 $
b10 3
b10 ?
b10 %
b10 2
b10 >
b10 *
b10 .
b10 E
b10 +
b10 /
b10 D
b10 ,
b10 0
b10 C
b10 -
b10 1
b10 B
0!
1F
#800
0F
#1000
b11 &
b11 9
b11 =
b11 '
b11 8
b11 <
b11 (
b11 7
b11 ;
b11 )
b11 6
b11 :
b11 *
b11 .
b11 E
b11 +
b11 /
b11 D
b11 ,
b11 0
b11 C
b11 -
b11 1
b11 B
1!
1F
#1200
0F
#1400
b100 "
b100 5
b100 A
b100 #
b100 4
b100 @
b100 $
b100 3
b100 ?
b100 %
b100 2
b100 >
b100 *
b100 .
b100 E
b100 +
b100 /
b100 D
b100 ,
b100 0
b100 C
b100 -
b100 1
b100 B
0!
1F
#1600
0F
#1800
b101 &
b101 9
b101 =
b101 '
b101 8
b101 <
b101 (
b101 7
b101 ;
b101 )
b101 6
b101 :
b101 *
b101 .
b101 E
b101 +
b101 /
b101 D
b101 ,
b101 0
b101 C
b101 -
b101 1
b101 B
1!
1F
#2000
0F
#2200
b110 "
b110 5
b110 A
b110 #
b110 4
b110 @
b110 $
b110 3
b110 ?
b110 %
b110 2
b110 >
b110 *
b110 .
b110 E
b110 +
b110 /
b110 D
b110 ,
b110 0
b110 C
b110 -
b110 1
b110 B
0!
1F
#2400
0F
#2600
b111 &
b111 9
b111 =
b111 '
b111 8
b111 <
b111 (
b111 7
b111 ;
b111 )
b111 6
b111 :
b111 *
b111 .
b111 E
b111 +
b111 /
b111 D
b111 ,
b111 0
b111 C
b111 -
b111 1
b111 B
1!
1F
#2800
0F
#3000
b1000 "
b1000 5
b1000 A
b1000 #
b1000 4
b1000 @
b1000 $
b1000 3
b1000 ?
b1000 %
b1000 2
b1000 >
b1000 *
b1000 .
b1000 E
b1000 +
b1000 /
b1000 D
b1000 ,
b1000 0
b1000 C
b1000 -
b1000 1
b1000 B
0!
1F
#3200
0F
#3400
b0 %
b0 2
b0 >
b0 $
b0 3
b0 ?
b0 #
b0 4
b0 @
b0 "
b0 5
b0 A
b0 -
b0 1
b0 B
b0 ,
b0 0
b0 C
b0 +
b0 /
b0 D
b0 *
b0 .
b0 E
1F
