$date
	Wed May 26 01:23:10 2021
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module BUF $end
$var wire 1 ! A $end
$var wire 1 " Y $end
$upscope $end
$scope module BancoPruebaDemux1x2_8Bits $end
$var wire 1 # validIn $end
$var wire 1 $ outValid1_estructural $end
$var wire 1 % outValid1 $end
$var wire 1 & outValid0_estructural $end
$var wire 1 ' outValid0 $end
$var wire 8 ( data_out1_estructural [7:0] $end
$var wire 8 ) data_out1 [7:0] $end
$var wire 8 * data_out0_estructural [7:0] $end
$var wire 8 + data_out0 [7:0] $end
$var wire 1 , clk4 $end
$var wire 1 - clk2 $end
$var wire 1 . clk $end
$var wire 8 / In [7:0] $end
$scope module Demux_1x2_estructural $end
$var wire 1 0 _03_ $end
$var wire 1 1 selector2 $end
$var wire 1 # validIn $end
$var wire 1 , clk4 $end
$var wire 1 - clk2 $end
$var wire 1 . clk $end
$var wire 1 2 _02_ $end
$var wire 8 3 _01_ [7:0] $end
$var wire 8 4 _00_ [7:0] $end
$var wire 8 5 In [7:0] $end
$var reg 8 6 ValorFuturo0 [7:0] $end
$var reg 8 7 data_out0_estructural [7:0] $end
$var reg 8 8 data_out1_estructural [7:0] $end
$var reg 1 & outValid0_estructural $end
$var reg 1 $ outValid1_estructural $end
$var reg 1 9 selector $end
$var reg 1 : validTemp_In $end
$var reg 1 ; validTemp_In1 $end
$upscope $end
$scope module Demux_1x4_conductual $end
$var wire 1 # validIn $end
$var wire 1 , clk4 $end
$var wire 1 - clk2 $end
$var wire 1 . clk $end
$var wire 8 < In [7:0] $end
$var reg 8 = ValorAnterior_out1 [7:0] $end
$var reg 8 > ValorFuturo0 [7:0] $end
$var reg 8 ? data_out0 [7:0] $end
$var reg 8 @ data_out1 [7:0] $end
$var reg 1 ' outValid0 $end
$var reg 1 % outValid1 $end
$var reg 1 A selector $end
$var reg 1 B selector2 $end
$var reg 1 C validTemp_In $end
$var reg 1 D validTemp_In1 $end
$upscope $end
$scope module prob $end
$var wire 8 E data_out0 [7:0] $end
$var wire 8 F data_out1 [7:0] $end
$var wire 1 ' outValid0 $end
$var wire 1 % outValid1 $end
$var reg 8 G In [7:0] $end
$var reg 1 . clk $end
$var reg 1 - clk2 $end
$var reg 1 , clk4 $end
$var reg 1 # validIn $end
$upscope $end
$upscope $end
$scope module DFF $end
$var wire 1 H C $end
$var wire 1 I D $end
$var reg 1 J Q $end
$upscope $end
$scope module DFFSR $end
$var wire 1 K C $end
$var wire 1 L D $end
$var wire 1 M R $end
$var wire 1 N S $end
$var reg 1 O Q $end
$upscope $end
$scope module NAND $end
$var wire 1 P A $end
$var wire 1 Q B $end
$var wire 1 R Y $end
$upscope $end
$scope module NOR $end
$var wire 1 S A $end
$var wire 1 T B $end
$var wire 1 U Y $end
$upscope $end
$scope module NOT $end
$var wire 1 V A $end
$var wire 1 W Y $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
zW
zV
xU
zT
zS
xR
zQ
zP
xO
zN
zM
zL
zK
xJ
zI
zH
bx G
bx F
bx E
1D
xC
1B
0A
bx @
bx ?
bx >
bx =
bx <
1;
x:
09
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
x2
11
10
bx /
1.
1-
0,
bx +
bx *
bx )
bx (
x'
x&
1%
1$
1#
z"
z!
$end
#100
0.
#200
12
b11111111 4
00
0B
1A
19
b11111111 /
b11111111 5
b11111111 <
b11111111 G
1.
1,
#300
0.
#400
1.
0,
0-
#500
0.
#600
b11011101 3
10
b11011101 /
b11011101 5
b11011101 <
b11011101 G
09
1:
b11111111 6
1C
b11111111 >
1B
0A
1.
1,
#700
0.
#800
1'
1&
1.
0,
1-
#900
0.
#1000
b11111111 +
b11111111 ?
b11111111 E
b11111111 *
b11111111 7
b11101110 4
00
b11011101 )
b11011101 @
b11011101 F
0B
1A
b11011101 (
b11011101 8
19
b11101110 /
b11101110 5
b11101110 <
b11101110 G
1.
1,
#1100
0.
#1200
1.
0,
0-
#1300
0.
#1400
b11001100 3
10
b11011101 =
b11001100 /
b11001100 5
b11001100 <
b11001100 G
09
b11101110 6
b11101110 >
1B
0A
1.
1,
#1500
0.
#1600
1.
0,
1-
#1700
0.
#1800
b11101110 +
b11101110 ?
b11101110 E
b11101110 *
b11101110 7
b10111011 4
00
b11001100 )
b11001100 @
b11001100 F
0B
1A
b11001100 (
b11001100 8
19
b10111011 /
b10111011 5
b10111011 <
b10111011 G
1.
1,
#1900
0.
#2000
1.
0,
0-
#2100
0.
#2200
b10011001 3
10
b11001100 =
b10011001 /
b10011001 5
b10011001 <
b10011001 G
09
b10111011 6
b10111011 >
1B
0A
1.
1,
#2300
0.
#2400
1.
0,
1-
#2500
0.
#2600
b10111011 +
b10111011 ?
b10111011 E
b10111011 *
b10111011 7
b10101010 4
00
b10011001 )
b10011001 @
b10011001 F
0B
1A
b10011001 (
b10011001 8
19
b10101010 /
b10101010 5
b10101010 <
b10101010 G
1.
1,
#2700
0.
#2800
1.
0,
0-
#2900
0.
#3000
b10001000 3
10
b10011001 =
b10001000 /
b10001000 5
b10001000 <
b10001000 G
09
b10101010 6
b10101010 >
1B
0A
1.
1,
#3100
0.
#3200
1.
0,
1-
#3300
0.
#3400
b10101010 +
b10101010 ?
b10101010 E
b10101010 *
b10101010 7
b10001000 4
00
b10001000 )
b10001000 @
b10001000 F
0B
1A
b10001000 (
b10001000 8
19
1.
1,
#3500
0.
#3600
1.
0,
0-
#3700
0.
#3800
b1110111 3
10
b10001000 =
b1110111 /
b1110111 5
b1110111 <
b1110111 G
09
b10001000 6
b10001000 >
1B
0A
1.
1,
#3900
0.
#4000
1.
0,
1-
#4100
0.
#4200
b10001000 *
b10001000 7
02
b0 4
00
0;
b10001000 +
b10001000 ?
b10001000 E
b1110111 )
b1110111 @
b1110111 F
0B
1A
b1110111 (
b1110111 8
19
0#
b0 /
b0 5
b0 <
b0 G
1.
1,
