/* Generated by Yosys 0.9 (git sha1 1979e0b) */
`include "cmos_cells.v"
(* src = "Mux2x1_8Bits.v:1" *)
module Mux2x1_8Bits_synth(In0, In1, clk, valid0, valid1, outValid, data_out);
  (* src = "Mux2x1_8Bits.v:38" *)
  wire _00_;
  (* src = "Mux2x1_8Bits.v:18" *)
  wire [7:0] _01_;
  (* src = "Mux2x1_8Bits.v:18" *)
  wire _02_;
  (* src = "Mux2x1_8Bits.v:40" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _03_;
  (* src = "Mux2x1_8Bits.v:23" *)
  wire _04_;
  (* src = "Mux2x1_8Bits.v:28" *)
  wire _05_;
  (* src = "Mux2x1_8Bits.v:23" *)
  wire _06_;
  (* src = "Mux2x1_8Bits.v:2" *)
  input [7:0] In0;
  (* src = "Mux2x1_8Bits.v:2" *)
  input [7:0] In1;
  (* src = "Mux2x1_8Bits.v:8" *)
  wire [7:0] ValorAnterior;
  (* src = "Mux2x1_8Bits.v:3" *)
  input clk;
  (* src = "Mux2x1_8Bits.v:5" *)
  output [7:0] data_out;
  reg [7:0] data_out;
  (* src = "Mux2x1_8Bits.v:4" *)
  output outValid;
  reg outValid;
  (* init = 1'h0 *)
  (* src = "Mux2x1_8Bits.v:10" *)
  reg selector = 1'h0;
  (* src = "Mux2x1_8Bits.v:3" *)
  input valid0;
  (* src = "Mux2x1_8Bits.v:3" *)
  input valid1;
  (* src = "Mux2x1_8Bits.v:9" *)
  wire validTemp;
  assign { _03_[31:1], _00_ } = selector + (* src = "Mux2x1_8Bits.v:40" *) 32'd1;
  assign _04_ = valid0 & (* src = "Mux2x1_8Bits.v:23" *) _06_;
  assign _05_ = valid1 & (* src = "Mux2x1_8Bits.v:28" *) selector;
  assign _06_ = ~ (* src = "Mux2x1_8Bits.v:23" *) selector;
  always @(posedge clk)
      data_out <= ValorAnterior;
  always @(posedge clk)
      outValid <= validTemp;
  always @(posedge clk)
      selector <= _00_;
  assign validTemp = _04_ ? (* full_case = 32'd1 *) (* src = "Mux2x1_8Bits.v:23" *) valid0 : _02_;
  assign ValorAnterior = _04_ ? (* full_case = 32'd1 *) (* src = "Mux2x1_8Bits.v:23" *) In0 : _01_;
  assign _02_ = _05_ ? (* full_case = 32'd1 *) (* src = "Mux2x1_8Bits.v:28" *) valid1 : 1'h0;
  assign _01_ = _05_ ? (* full_case = 32'd1 *) (* src = "Mux2x1_8Bits.v:28" *) In1 : data_out;
  assign _03_[0] = _00_;
endmodule

(* src = "Recirculacion.v:1" *)
module Recirculacion_synth(In0, In1, In2, In3, validIn, data_mux0, data_Probador0, data_mux1, data_Probador1, data_mux2, data_Probador2, data_mux3, data_Probador3);
  (* src = "Recirculacion.v:2" *)
  input [7:0] In0;
  (* src = "Recirculacion.v:2" *)
  input [7:0] In1;
  (* src = "Recirculacion.v:2" *)
  input [7:0] In2;
  (* src = "Recirculacion.v:2" *)
  input [7:0] In3;
  (* src = "Recirculacion.v:5" *)
  output [7:0] data_Probador0;
  (* src = "Recirculacion.v:7" *)
  output [7:0] data_Probador1;
  (* src = "Recirculacion.v:9" *)
  output [7:0] data_Probador2;
  (* src = "Recirculacion.v:11" *)
  output [7:0] data_Probador3;
  (* src = "Recirculacion.v:4" *)
  output [7:0] data_mux0;
  (* src = "Recirculacion.v:6" *)
  output [7:0] data_mux1;
  (* src = "Recirculacion.v:8" *)
  output [7:0] data_mux2;
  (* src = "Recirculacion.v:10" *)
  output [7:0] data_mux3;
  (* src = "Recirculacion.v:3" *)
  input validIn;
  assign data_mux3 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion.v:64" *) In3 : 8'h00;
  assign data_Probador3 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion.v:64" *) 8'h00 : In3;
  assign data_mux2 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion.v:49" *) In2 : 8'h00;
  assign data_Probador2 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion.v:49" *) 8'h00 : In2;
  assign data_mux1 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion.v:34" *) In1 : 8'h00;
  assign data_Probador1 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion.v:34" *) 8'h00 : In1;
  assign data_mux0 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion.v:19" *) In0 : 8'h00;
  assign data_Probador0 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion.v:19" *) 8'h00 : In0;
endmodule

(* top =  1  *)
(* src = "phy_tx.v:4" *)
module phy_tx_synth(In0, In1, In2, In3, clk, clk2, clk4, valid0, valid1, valid2, valid3, validIn, data_out, valid_out, data_Probador0, data_Probador1, data_Probador2, data_Probador3);
  (* src = "phy_tx.v:5" *)
  input [7:0] In0;
  (* src = "phy_tx.v:29" *)
  wire [7:0] In0_good;
  (* src = "phy_tx.v:6" *)
  input [7:0] In1;
  (* src = "phy_tx.v:29" *)
  wire [7:0] In1_good;
  (* src = "phy_tx.v:7" *)
  input [7:0] In2;
  (* src = "phy_tx.v:29" *)
  wire [7:0] In2_good;
  (* src = "phy_tx.v:8" *)
  input [7:0] In3;
  (* src = "phy_tx.v:29" *)
  wire [7:0] In3_good;
  (* src = "phy_tx.v:9" *)
  input clk;
  (* src = "phy_tx.v:10" *)
  input clk2;
  (* src = "phy_tx.v:11" *)
  input clk4;
  (* src = "phy_tx.v:18" *)
  output [7:0] data_Probador0;
  (* src = "phy_tx.v:19" *)
  output [7:0] data_Probador1;
  (* src = "phy_tx.v:20" *)
  output [7:0] data_Probador2;
  (* src = "phy_tx.v:21" *)
  output [7:0] data_Probador3;
  (* src = "phy_tx.v:14" *)
  output [7:0] data_out;
  (* src = "phy_tx.v:26" *)
  wire [7:0] out_temp1;
  (* src = "phy_tx.v:26" *)
  wire [7:0] out_temp2;
  (* src = "phy_tx.v:12" *)
  input valid0;
  (* src = "phy_tx.v:12" *)
  input valid1;
  (* src = "phy_tx.v:12" *)
  input valid2;
  (* src = "phy_tx.v:12" *)
  input valid3;
  (* src = "phy_tx.v:13" *)
  input validIn;
  (* src = "phy_tx.v:15" *)
  output valid_out;
  (* src = "phy_tx.v:27" *)
  wire valid_out_1;
  (* src = "phy_tx.v:27" *)
  wire valid_out_2;
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx.v:56" *)
  Mux2x1_8Bits MUX2x1_1 (
    .In0(In0_good),
    .In1(In1_good),
    .clk(clk2),
    .data_out(out_temp1),
    .outValid(valid_out_1),
    .valid0(valid0),
    .valid1(valid1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx.v:66" *)
  Mux2x1_8Bits MUX2x1_2 (
    .In0(In2_good),
    .In1(In3_good),
    .clk(clk2),
    .data_out(out_temp2),
    .outValid(valid_out_2),
    .valid0(valid2),
    .valid1(valid3)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx.v:81" *)
  Mux2x1_8Bits MUX2x1_3 (
    .In0(out_temp2),
    .In1(out_temp1),
    .clk(clk4),
    .data_out(data_out),
    .outValid(valid_out),
    .valid0(valid_out_2),
    .valid1(valid_out_1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx.v:32" *)
  Recirculacion Recirculacion_testbench (
    .In0(In0),
    .In1(In1),
    .In2(In2),
    .In3(In3),
    .data_Probador0(data_Probador0),
    .data_Probador1(data_Probador1),
    .data_Probador2(data_Probador2),
    .data_Probador3(data_Probador3),
    .data_mux0(In0_good),
    .data_mux1(In1_good),
    .data_mux2(In2_good),
    .data_mux3(In3_good),
    .validIn(validIn)
  );
endmodule
