/* Generated by Yosys 0.9 (git sha1 1979e0b) */
`include "cmos_cells.v"
(* top =  1  *)
(* src = "Mux2x1_8Bits.v:1" *)
module Mux2x1_8Bits_synth(In0, In1, clk, valid0, valid1, outValid, data_out);
  (* src = "Mux2x1_8Bits.v:38" *)
  wire _00_;
  (* src = "Mux2x1_8Bits.v:18" *)
  wire [7:0] _01_;
  (* src = "Mux2x1_8Bits.v:18" *)
  wire _02_;
  (* src = "Mux2x1_8Bits.v:40" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _03_;
  (* src = "Mux2x1_8Bits.v:23" *)
  wire _04_;
  (* src = "Mux2x1_8Bits.v:28" *)
  wire _05_;
  (* src = "Mux2x1_8Bits.v:23" *)
  wire _06_;
  (* src = "Mux2x1_8Bits.v:2" *)
  input [7:0] In0;
  (* src = "Mux2x1_8Bits.v:2" *)
  input [7:0] In1;
  (* src = "Mux2x1_8Bits.v:8" *)
  wire [7:0] ValorAnterior;
  (* src = "Mux2x1_8Bits.v:3" *)
  input clk;
  (* src = "Mux2x1_8Bits.v:5" *)
  output [7:0] data_out;
  reg [7:0] data_out;
  (* src = "Mux2x1_8Bits.v:4" *)
  output outValid;
  reg outValid;
  (* init = 1'h0 *)
  (* src = "Mux2x1_8Bits.v:10" *)
  reg selector = 1'h0;
  (* src = "Mux2x1_8Bits.v:3" *)
  input valid0;
  (* src = "Mux2x1_8Bits.v:3" *)
  input valid1;
  (* src = "Mux2x1_8Bits.v:9" *)
  wire validTemp;
  assign { _03_[31:1], _00_ } = selector + (* src = "Mux2x1_8Bits.v:40" *) 32'd1;
  assign _04_ = valid0 & (* src = "Mux2x1_8Bits.v:23" *) _06_;
  assign _05_ = valid1 & (* src = "Mux2x1_8Bits.v:28" *) selector;
  assign _06_ = ~ (* src = "Mux2x1_8Bits.v:23" *) selector;
  always @(posedge clk)
      data_out <= ValorAnterior;
  always @(posedge clk)
      outValid <= validTemp;
  always @(posedge clk)
      selector <= _00_;
  assign _02_ = _05_ ? (* full_case = 32'd1 *) (* src = "Mux2x1_8Bits.v:28" *) valid1 : 1'h0;
  assign _01_ = _05_ ? (* full_case = 32'd1 *) (* src = "Mux2x1_8Bits.v:28" *) In1 : data_out;
  assign validTemp = _04_ ? (* full_case = 32'd1 *) (* src = "Mux2x1_8Bits.v:23" *) valid0 : _02_;
  assign ValorAnterior = _04_ ? (* full_case = 32'd1 *) (* src = "Mux2x1_8Bits.v:23" *) In0 : _01_;
  assign _03_[0] = _00_;
endmodule
