/* Generated by Yosys 0.9+4052 (git sha1 44520808, gcc 9.3.0-17ubuntu1~20.04 -fPIC -Os) */

(* src = "Mux2x1_8Bits_estruct.v:3.1-40.10" *)
module Mux2x1_8Bits_estruct(In0, In1, clk, valid0, valid1, outValid, data_out);
  (* src = "Mux2x1_8Bits_estruct.v:33.5-38.8" *)
  wire _00_;
  (* src = "Mux2x1_8Bits_estruct.v:14.5-31.8" *)
  wire [7:0] _01_;
  (* src = "Mux2x1_8Bits_estruct.v:14.5-31.8" *)
  wire _02_;
  (* src = "Mux2x1_8Bits_estruct.v:34.21-34.33" *)
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _03_;
  (* src = "Mux2x1_8Bits_estruct.v:18.12-18.39" *)
  wire _04_;
  (* src = "Mux2x1_8Bits_estruct.v:23.17-23.44" *)
  wire _05_;
  wire _06_;
  (* src = "Mux2x1_8Bits_estruct.v:18.26-18.39" *)
  wire _07_;
  (* src = "Mux2x1_8Bits_estruct.v:4.17-4.20" *)
  input [7:0] In0;
  (* src = "Mux2x1_8Bits_estruct.v:4.21-4.24" *)
  input [7:0] In1;
  (* src = "Mux2x1_8Bits_estruct.v:10.15-10.28" *)
  wire [7:0] ValorAnterior;
  (* src = "Mux2x1_8Bits_estruct.v:5.11-5.14" *)
  input clk;
  (* src = "Mux2x1_8Bits_estruct.v:7.22-7.30" *)
  output [7:0] data_out;
  reg [7:0] data_out;
  (* src = "Mux2x1_8Bits_estruct.v:6.16-6.24" *)
  output outValid;
  reg outValid;
  (* src = "Mux2x1_8Bits_estruct.v:12.9-12.17" *)
  reg selector = 1'h0;
  (* src = "Mux2x1_8Bits_estruct.v:5.16-5.22" *)
  input valid0;
  (* src = "Mux2x1_8Bits_estruct.v:5.24-5.30" *)
  input valid1;
  (* src = "Mux2x1_8Bits_estruct.v:11.10-11.19" *)
  wire validTemp;
  assign { _03_[31:1], _00_ } = selector + (* src = "Mux2x1_8Bits_estruct.v:34.21-34.33" *) 32'd1;
  assign _04_ = valid0 & (* src = "Mux2x1_8Bits_estruct.v:18.12-18.39" *) _07_;
  assign _05_ = valid1 & (* src = "Mux2x1_8Bits_estruct.v:23.17-23.44" *) selector;
  assign _06_ = | { _05_, _04_ };
  (* src = "Mux2x1_8Bits_estruct.v:33.5-38.8" *)
  always @(posedge clk)
    if (_06_) data_out <= ValorAnterior;
  assign _07_ = ~ (* src = "Mux2x1_8Bits_estruct.v:18.26-18.39" *) selector;
  (* src = "Mux2x1_8Bits_estruct.v:33.5-38.8" *)
  always @(posedge clk)
    outValid <= validTemp;
  (* src = "Mux2x1_8Bits_estruct.v:33.5-38.8" *)
  always @(posedge clk)
    selector <= _00_;
  assign validTemp = _04_ ? (* full_case = 32'd1 *) (* src = "Mux2x1_8Bits_estruct.v:18.12-18.39|Mux2x1_8Bits.v:18.9-30.12" *) valid0 : _02_;
  assign ValorAnterior = _04_ ? (* full_case = 32'd1 *) (* src = "Mux2x1_8Bits_estruct.v:18.12-18.39|Mux2x1_8Bits.v:18.9-30.12" *) In0 : _01_;
  assign _02_ = _05_ ? (* full_case = 32'd1 *) (* src = "Mux2x1_8Bits_estruct.v:23.17-23.44|Mux2x1_8Bits.v:23.14-30.12" *) valid1 : 1'h0;
  assign _01_ = _05_ ? (* full_case = 32'd1 *) (* src = "Mux2x1_8Bits_estruct.v:23.17-23.44|Mux2x1_8Bits.v:23.14-30.12" *) In1 : 8'hxx;
  assign _03_[0] = _00_;
endmodule

(* src = "Recirculacion_estruct.v:1.1-75.10" *)
module Recirculacion_estruct(In0, In1, In2, In3, validIn, data_mux0, data_Probador0, data_mux1, data_Probador1, data_mux2, data_Probador2, data_mux3, data_Probador3);
  (* src = "Recirculacion_estruct.v:2.17-2.20" *)
  input [7:0] In0;
  (* src = "Recirculacion_estruct.v:2.22-2.25" *)
  input [7:0] In1;
  (* src = "Recirculacion_estruct.v:2.27-2.30" *)
  input [7:0] In2;
  (* src = "Recirculacion_estruct.v:2.32-2.35" *)
  input [7:0] In3;
  (* src = "Recirculacion_estruct.v:5.22-5.36" *)
  output [7:0] data_Probador0;
  (* src = "Recirculacion_estruct.v:7.22-7.36" *)
  output [7:0] data_Probador1;
  (* src = "Recirculacion_estruct.v:9.22-9.36" *)
  output [7:0] data_Probador2;
  (* src = "Recirculacion_estruct.v:11.22-11.36" *)
  output [7:0] data_Probador3;
  (* src = "Recirculacion_estruct.v:4.22-4.31" *)
  output [7:0] data_mux0;
  (* src = "Recirculacion_estruct.v:6.22-6.31" *)
  output [7:0] data_mux1;
  (* src = "Recirculacion_estruct.v:8.22-8.31" *)
  output [7:0] data_mux2;
  (* src = "Recirculacion_estruct.v:10.22-10.31" *)
  output [7:0] data_mux3;
  (* src = "Recirculacion_estruct.v:3.11-3.18" *)
  input validIn;
  assign data_mux3 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion_estruct.v:64.12-64.24|Recirculacion.v:64.9-71.12" *) In3 : 8'h00;
  assign data_Probador3 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion_estruct.v:64.12-64.24|Recirculacion.v:64.9-71.12" *) 8'h00 : In3;
  assign data_mux2 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion_estruct.v:49.12-49.24|Recirculacion.v:49.9-56.12" *) In2 : 8'h00;
  assign data_Probador2 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion_estruct.v:49.12-49.24|Recirculacion.v:49.9-56.12" *) 8'h00 : In2;
  assign data_mux1 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion_estruct.v:34.12-34.24|Recirculacion.v:34.9-41.12" *) In1 : 8'h00;
  assign data_Probador1 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion_estruct.v:34.12-34.24|Recirculacion.v:34.9-41.12" *) 8'h00 : In1;
  assign data_mux0 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion_estruct.v:19.12-19.24|Recirculacion.v:19.9-26.12" *) In0 : 8'h00;
  assign data_Probador0 = validIn ? (* full_case = 32'd1 *) (* src = "Recirculacion_estruct.v:19.12-19.24|Recirculacion.v:19.9-26.12" *) 8'h00 : In0;
endmodule

(* top =  1  *)
(* src = "phy_tx_estruct.v:4.1-98.10" *)
module phy_tx_estruct(In0, In1, In2, In3, clk, clk2, clk4, valid0, valid1, valid2, valid3, validIn, data_out_estruct, valid_out_estruct, data_Probador0, data_Probador1, data_Probador2, data_Probador3);
  (* src = "phy_tx_estruct.v:5.17-5.20" *)
  input [7:0] In0;
  (* src = "phy_tx_estruct.v:29.12-29.20" *)
  wire [7:0] In0_good;
  (* src = "phy_tx_estruct.v:6.17-6.20" *)
  input [7:0] In1;
  (* src = "phy_tx_estruct.v:29.22-29.30" *)
  wire [7:0] In1_good;
  (* src = "phy_tx_estruct.v:7.17-7.20" *)
  input [7:0] In2;
  (* src = "phy_tx_estruct.v:29.32-29.40" *)
  wire [7:0] In2_good;
  (* src = "phy_tx_estruct.v:8.17-8.20" *)
  input [7:0] In3;
  (* src = "phy_tx_estruct.v:29.42-29.50" *)
  wire [7:0] In3_good;
  (* src = "phy_tx_estruct.v:9.11-9.14" *)
  input clk;
  (* src = "phy_tx_estruct.v:10.11-10.15" *)
  input clk2;
  (* src = "phy_tx_estruct.v:11.11-11.15" *)
  input clk4;
  (* src = "phy_tx_estruct.v:18.18-18.32" *)
  output [7:0] data_Probador0;
  (* src = "phy_tx_estruct.v:19.18-19.32" *)
  output [7:0] data_Probador1;
  (* src = "phy_tx_estruct.v:20.18-20.32" *)
  output [7:0] data_Probador2;
  (* src = "phy_tx_estruct.v:21.18-21.32" *)
  output [7:0] data_Probador3;
  (* src = "phy_tx_estruct.v:14.18-14.37" *)
  output [7:0] data_out_estruct;
  (* src = "phy_tx_estruct.v:26.12-26.21" *)
  wire [7:0] out_temp1;
  (* src = "phy_tx_estruct.v:26.23-26.32" *)
  wire [7:0] out_temp2;
  (* src = "phy_tx_estruct.v:12.11-12.17" *)
  input valid0;
  (* src = "phy_tx_estruct.v:12.19-12.25" *)
  input valid1;
  (* src = "phy_tx_estruct.v:12.27-12.33" *)
  input valid2;
  (* src = "phy_tx_estruct.v:12.35-12.41" *)
  input valid3;
  (* src = "phy_tx_estruct.v:13.11-13.18" *)
  input validIn;
  (* src = "phy_tx_estruct.v:27.6-27.17" *)
  wire valid_out_1;
  (* src = "phy_tx_estruct.v:27.19-27.30" *)
  wire valid_out_2;
  (* src = "phy_tx_estruct.v:15.12-15.32" *)
  output valid_out_estruct;
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx_estruct.v:62.14-70.2" *)
  Mux2x1_8Bits_estruct MUX2x1_1 (
    .In0(In0_good),
    .In1(In1_good),
    .clk(clk2),
    .data_out(out_temp1),
    .outValid(valid_out_1),
    .valid0(valid0),
    .valid1(valid1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx_estruct.v:72.14-80.2" *)
  Mux2x1_8Bits_estruct MUX2x1_2 (
    .In0(In2_good),
    .In1(In3_good),
    .clk(clk2),
    .data_out(out_temp2),
    .outValid(valid_out_2),
    .valid0(valid2),
    .valid1(valid3)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx_estruct.v:87.14-95.2" *)
  Mux2x1_8Bits_estruct MUX2x1_3 (
    .In0(out_temp2),
    .In1(out_temp1),
    .clk(clk4),
    .data_out(data_out_estruct),
    .outValid(valid_out_estruct),
    .valid0(valid_out_2),
    .valid1(valid_out_1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx_estruct.v:37.15-51.2" *)
  Recirculacion_estruct Recirculacion_testbench (
    .In0(In0),
    .In1(In1),
    .In2(In2),
    .In3(In3),
    .data_Probador0(data_Probador0),
    .data_Probador1(data_Probador1),
    .data_Probador2(data_Probador2),
    .data_Probador3(data_Probador3),
    .data_mux0(In0_good),
    .data_mux1(In1_good),
    .data_mux2(In2_good),
    .data_mux3(In3_good),
    .validIn(validIn)
  );
endmodule
