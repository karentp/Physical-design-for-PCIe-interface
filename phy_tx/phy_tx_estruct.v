/* Generated by Yosys 0.9+4052 (git sha1 44520808, gcc 9.3.0-17ubuntu1~20.04 -fPIC -Os) */

(* src = "Mux2x1_8Bits_estruct.v:3.1-46.10" *)
module Mux2x1_8Bits_estruct(In0, In1, clk, valid0, valid1, reset, outValid, data_out);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  (* src = "Mux2x1_8Bits_estruct.v:4.17-4.20" *)
  input [7:0] In0;
  (* src = "Mux2x1_8Bits_estruct.v:4.21-4.24" *)
  input [7:0] In1;
  (* src = "Mux2x1_8Bits_estruct.v:5.11-5.14" *)
  input clk;
  (* src = "Mux2x1_8Bits_estruct.v:8.22-8.30" *)
  output [7:0] data_out;
  (* src = "Mux2x1_8Bits_estruct.v:7.16-7.24" *)
  output outValid;
  (* src = "Mux2x1_8Bits_estruct.v:6.11-6.16" *)
  input reset;
  (* src = "Mux2x1_8Bits_estruct.v:13.9-13.17" *)
  wire selector;
  (* src = "Mux2x1_8Bits_estruct.v:5.16-5.22" *)
  input valid0;
  (* src = "Mux2x1_8Bits_estruct.v:5.24-5.30" *)
  input valid1;
  NOT _063_ (
    .A(reset),
    .Y(_011_)
  );
  NOT _064_ (
    .A(selector),
    .Y(_012_)
  );
  NOT _065_ (
    .A(valid1),
    .Y(_013_)
  );
  NOT _066_ (
    .A(valid0),
    .Y(_014_)
  );
  NOR _067_ (
    .A(_012_),
    .B(_013_),
    .Y(_015_)
  );
  NAND _068_ (
    .A(selector),
    .B(valid1),
    .Y(_016_)
  );
  NOR _069_ (
    .A(selector),
    .B(_014_),
    .Y(_017_)
  );
  NAND _070_ (
    .A(_012_),
    .B(valid0),
    .Y(_018_)
  );
  NOR _071_ (
    .A(_015_),
    .B(_017_),
    .Y(_019_)
  );
  NAND _072_ (
    .A(_016_),
    .B(_018_),
    .Y(_020_)
  );
  NOR _073_ (
    .A(reset),
    .B(_019_),
    .Y(_021_)
  );
  NAND _074_ (
    .A(_011_),
    .B(_020_),
    .Y(_022_)
  );
  NAND _075_ (
    .A(outValid),
    .B(reset),
    .Y(_023_)
  );
  NAND _076_ (
    .A(_022_),
    .B(_023_),
    .Y(_008_)
  );
  NAND _077_ (
    .A(In1[7]),
    .B(_015_),
    .Y(_024_)
  );
  NAND _078_ (
    .A(In0[7]),
    .B(_017_),
    .Y(_025_)
  );
  NAND _079_ (
    .A(_024_),
    .B(_025_),
    .Y(_026_)
  );
  NAND _080_ (
    .A(_021_),
    .B(_026_),
    .Y(_027_)
  );
  NAND _081_ (
    .A(data_out[7]),
    .B(_022_),
    .Y(_028_)
  );
  NAND _082_ (
    .A(_027_),
    .B(_028_),
    .Y(_007_)
  );
  NAND _083_ (
    .A(In1[6]),
    .B(_015_),
    .Y(_029_)
  );
  NAND _084_ (
    .A(In0[6]),
    .B(_017_),
    .Y(_030_)
  );
  NAND _085_ (
    .A(_029_),
    .B(_030_),
    .Y(_031_)
  );
  NAND _086_ (
    .A(_021_),
    .B(_031_),
    .Y(_032_)
  );
  NAND _087_ (
    .A(data_out[6]),
    .B(_022_),
    .Y(_033_)
  );
  NAND _088_ (
    .A(_032_),
    .B(_033_),
    .Y(_006_)
  );
  NAND _089_ (
    .A(In1[5]),
    .B(_015_),
    .Y(_034_)
  );
  NAND _090_ (
    .A(In0[5]),
    .B(_017_),
    .Y(_035_)
  );
  NAND _091_ (
    .A(_034_),
    .B(_035_),
    .Y(_036_)
  );
  NAND _092_ (
    .A(_021_),
    .B(_036_),
    .Y(_037_)
  );
  NAND _093_ (
    .A(data_out[5]),
    .B(_022_),
    .Y(_038_)
  );
  NAND _094_ (
    .A(_037_),
    .B(_038_),
    .Y(_005_)
  );
  NAND _095_ (
    .A(In1[4]),
    .B(_015_),
    .Y(_039_)
  );
  NAND _096_ (
    .A(In0[4]),
    .B(_017_),
    .Y(_040_)
  );
  NAND _097_ (
    .A(_039_),
    .B(_040_),
    .Y(_041_)
  );
  NAND _098_ (
    .A(_021_),
    .B(_041_),
    .Y(_042_)
  );
  NAND _099_ (
    .A(data_out[4]),
    .B(_022_),
    .Y(_043_)
  );
  NAND _100_ (
    .A(_042_),
    .B(_043_),
    .Y(_004_)
  );
  NAND _101_ (
    .A(In1[3]),
    .B(_015_),
    .Y(_044_)
  );
  NAND _102_ (
    .A(In0[3]),
    .B(_017_),
    .Y(_045_)
  );
  NAND _103_ (
    .A(_044_),
    .B(_045_),
    .Y(_046_)
  );
  NAND _104_ (
    .A(_021_),
    .B(_046_),
    .Y(_047_)
  );
  NAND _105_ (
    .A(data_out[3]),
    .B(_022_),
    .Y(_048_)
  );
  NAND _106_ (
    .A(_047_),
    .B(_048_),
    .Y(_003_)
  );
  NAND _107_ (
    .A(In1[2]),
    .B(_015_),
    .Y(_049_)
  );
  NAND _108_ (
    .A(In0[2]),
    .B(_017_),
    .Y(_050_)
  );
  NAND _109_ (
    .A(_049_),
    .B(_050_),
    .Y(_051_)
  );
  NAND _110_ (
    .A(_021_),
    .B(_051_),
    .Y(_052_)
  );
  NAND _111_ (
    .A(data_out[2]),
    .B(_022_),
    .Y(_053_)
  );
  NAND _112_ (
    .A(_052_),
    .B(_053_),
    .Y(_002_)
  );
  NAND _113_ (
    .A(In1[1]),
    .B(_015_),
    .Y(_054_)
  );
  NAND _114_ (
    .A(In0[1]),
    .B(_017_),
    .Y(_055_)
  );
  NAND _115_ (
    .A(_054_),
    .B(_055_),
    .Y(_056_)
  );
  NAND _116_ (
    .A(_021_),
    .B(_056_),
    .Y(_057_)
  );
  NAND _117_ (
    .A(data_out[1]),
    .B(_022_),
    .Y(_058_)
  );
  NAND _118_ (
    .A(_057_),
    .B(_058_),
    .Y(_001_)
  );
  NAND _119_ (
    .A(In1[0]),
    .B(_015_),
    .Y(_059_)
  );
  NAND _120_ (
    .A(In0[0]),
    .B(_017_),
    .Y(_060_)
  );
  NAND _121_ (
    .A(_059_),
    .B(_060_),
    .Y(_061_)
  );
  NAND _122_ (
    .A(_021_),
    .B(_061_),
    .Y(_062_)
  );
  NAND _123_ (
    .A(data_out[0]),
    .B(_022_),
    .Y(_010_)
  );
  NAND _124_ (
    .A(_062_),
    .B(_010_),
    .Y(_000_)
  );
  NOR _125_ (
    .A(reset),
    .B(selector),
    .Y(_009_)
  );
  (* src = "Mux2x1_8Bits_estruct.v:35.5-44.8" *)
  DFF _126_ (
    .C(clk),
    .D(_000_),
    .Q(data_out[0])
  );
  (* src = "Mux2x1_8Bits_estruct.v:35.5-44.8" *)
  DFF _127_ (
    .C(clk),
    .D(_001_),
    .Q(data_out[1])
  );
  (* src = "Mux2x1_8Bits_estruct.v:35.5-44.8" *)
  DFF _128_ (
    .C(clk),
    .D(_002_),
    .Q(data_out[2])
  );
  (* src = "Mux2x1_8Bits_estruct.v:35.5-44.8" *)
  DFF _129_ (
    .C(clk),
    .D(_003_),
    .Q(data_out[3])
  );
  (* src = "Mux2x1_8Bits_estruct.v:35.5-44.8" *)
  DFF _130_ (
    .C(clk),
    .D(_004_),
    .Q(data_out[4])
  );
  (* src = "Mux2x1_8Bits_estruct.v:35.5-44.8" *)
  DFF _131_ (
    .C(clk),
    .D(_005_),
    .Q(data_out[5])
  );
  (* src = "Mux2x1_8Bits_estruct.v:35.5-44.8" *)
  DFF _132_ (
    .C(clk),
    .D(_006_),
    .Q(data_out[6])
  );
  (* src = "Mux2x1_8Bits_estruct.v:35.5-44.8" *)
  DFF _133_ (
    .C(clk),
    .D(_007_),
    .Q(data_out[7])
  );
  (* src = "Mux2x1_8Bits_estruct.v:35.5-44.8" *)
  DFF _134_ (
    .C(clk),
    .D(_008_),
    .Q(outValid)
  );
  (* src = "Mux2x1_8Bits_estruct.v:35.5-44.8" *)
  DFF _135_ (
    .C(clk),
    .D(_009_),
    .Q(selector)
  );
endmodule

(* src = "Recirculacion_estruct.v:1.1-75.10" *)
module Recirculacion_estruct(In0, In1, In2, In3, validIn, data_mux0, data_Probador0, data_mux1, data_Probador1, data_mux2, data_Probador2, data_mux3, data_Probador3);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  (* src = "Recirculacion_estruct.v:2.17-2.20" *)
  input [7:0] In0;
  (* src = "Recirculacion_estruct.v:2.22-2.25" *)
  input [7:0] In1;
  (* src = "Recirculacion_estruct.v:2.27-2.30" *)
  input [7:0] In2;
  (* src = "Recirculacion_estruct.v:2.32-2.35" *)
  input [7:0] In3;
  (* src = "Recirculacion_estruct.v:5.22-5.36" *)
  output [7:0] data_Probador0;
  (* src = "Recirculacion_estruct.v:7.22-7.36" *)
  output [7:0] data_Probador1;
  (* src = "Recirculacion_estruct.v:9.22-9.36" *)
  output [7:0] data_Probador2;
  (* src = "Recirculacion_estruct.v:11.22-11.36" *)
  output [7:0] data_Probador3;
  (* src = "Recirculacion_estruct.v:4.22-4.31" *)
  output [7:0] data_mux0;
  (* src = "Recirculacion_estruct.v:6.22-6.31" *)
  output [7:0] data_mux1;
  (* src = "Recirculacion_estruct.v:8.22-8.31" *)
  output [7:0] data_mux2;
  (* src = "Recirculacion_estruct.v:10.22-10.31" *)
  output [7:0] data_mux3;
  (* src = "Recirculacion_estruct.v:3.11-3.18" *)
  input validIn;
  NOR _064_ (
    .A(validIn),
    .B(_026_),
    .Y(data_Probador0[4])
  );
  NOR _065_ (
    .A(validIn),
    .B(_027_),
    .Y(data_Probador0[5])
  );
  NOR _066_ (
    .A(validIn),
    .B(_028_),
    .Y(data_Probador0[6])
  );
  NOR _067_ (
    .A(validIn),
    .B(_029_),
    .Y(data_Probador0[7])
  );
  NOT _068_ (
    .A(In3[0]),
    .Y(_062_)
  );
  NOT _069_ (
    .A(In3[1]),
    .Y(_063_)
  );
  NOT _070_ (
    .A(In3[2]),
    .Y(_000_)
  );
  NOT _071_ (
    .A(In3[3]),
    .Y(_001_)
  );
  NOT _072_ (
    .A(In3[4]),
    .Y(_002_)
  );
  NOT _073_ (
    .A(In3[5]),
    .Y(_003_)
  );
  NOT _074_ (
    .A(In3[6]),
    .Y(_004_)
  );
  NOT _075_ (
    .A(In3[7]),
    .Y(_005_)
  );
  NOT _076_ (
    .A(In2[0]),
    .Y(_006_)
  );
  NOT _077_ (
    .A(In2[1]),
    .Y(_007_)
  );
  NOT _078_ (
    .A(In2[2]),
    .Y(_008_)
  );
  NOT _079_ (
    .A(In2[3]),
    .Y(_009_)
  );
  NOT _080_ (
    .A(In2[4]),
    .Y(_010_)
  );
  NOT _081_ (
    .A(In2[5]),
    .Y(_011_)
  );
  NOT _082_ (
    .A(In2[6]),
    .Y(_012_)
  );
  NOT _083_ (
    .A(In2[7]),
    .Y(_013_)
  );
  NOT _084_ (
    .A(In1[0]),
    .Y(_014_)
  );
  NOT _085_ (
    .A(In1[1]),
    .Y(_015_)
  );
  NOT _086_ (
    .A(In1[2]),
    .Y(_016_)
  );
  NOT _087_ (
    .A(In1[3]),
    .Y(_017_)
  );
  NOT _088_ (
    .A(In1[4]),
    .Y(_018_)
  );
  NOT _089_ (
    .A(In1[5]),
    .Y(_019_)
  );
  NOT _090_ (
    .A(In1[6]),
    .Y(_020_)
  );
  NOT _091_ (
    .A(In1[7]),
    .Y(_021_)
  );
  NOT _092_ (
    .A(In0[0]),
    .Y(_022_)
  );
  NOT _093_ (
    .A(In0[1]),
    .Y(_023_)
  );
  NOT _094_ (
    .A(In0[2]),
    .Y(_024_)
  );
  NOT _095_ (
    .A(In0[3]),
    .Y(_025_)
  );
  NOT _096_ (
    .A(In0[4]),
    .Y(_026_)
  );
  NOT _097_ (
    .A(In0[5]),
    .Y(_027_)
  );
  NOT _098_ (
    .A(In0[6]),
    .Y(_028_)
  );
  NOT _099_ (
    .A(In0[7]),
    .Y(_029_)
  );
  NAND _100_ (
    .A(In3[0]),
    .B(validIn),
    .Y(_030_)
  );
  NOT _101_ (
    .A(_030_),
    .Y(data_mux3[0])
  );
  NAND _102_ (
    .A(validIn),
    .B(In3[1]),
    .Y(_031_)
  );
  NOT _103_ (
    .A(_031_),
    .Y(data_mux3[1])
  );
  NAND _104_ (
    .A(validIn),
    .B(In3[2]),
    .Y(_032_)
  );
  NOT _105_ (
    .A(_032_),
    .Y(data_mux3[2])
  );
  NAND _106_ (
    .A(validIn),
    .B(In3[3]),
    .Y(_033_)
  );
  NOT _107_ (
    .A(_033_),
    .Y(data_mux3[3])
  );
  NAND _108_ (
    .A(validIn),
    .B(In3[4]),
    .Y(_034_)
  );
  NOT _109_ (
    .A(_034_),
    .Y(data_mux3[4])
  );
  NAND _110_ (
    .A(validIn),
    .B(In3[5]),
    .Y(_035_)
  );
  NOT _111_ (
    .A(_035_),
    .Y(data_mux3[5])
  );
  NAND _112_ (
    .A(validIn),
    .B(In3[6]),
    .Y(_036_)
  );
  NOT _113_ (
    .A(_036_),
    .Y(data_mux3[6])
  );
  NAND _114_ (
    .A(validIn),
    .B(In3[7]),
    .Y(_037_)
  );
  NOT _115_ (
    .A(_037_),
    .Y(data_mux3[7])
  );
  NOR _116_ (
    .A(_062_),
    .B(validIn),
    .Y(data_Probador3[0])
  );
  NOR _117_ (
    .A(validIn),
    .B(_063_),
    .Y(data_Probador3[1])
  );
  NOR _118_ (
    .A(validIn),
    .B(_000_),
    .Y(data_Probador3[2])
  );
  NOR _119_ (
    .A(validIn),
    .B(_001_),
    .Y(data_Probador3[3])
  );
  NOR _120_ (
    .A(validIn),
    .B(_002_),
    .Y(data_Probador3[4])
  );
  NOR _121_ (
    .A(validIn),
    .B(_003_),
    .Y(data_Probador3[5])
  );
  NOR _122_ (
    .A(validIn),
    .B(_004_),
    .Y(data_Probador3[6])
  );
  NOR _123_ (
    .A(validIn),
    .B(_005_),
    .Y(data_Probador3[7])
  );
  NAND _124_ (
    .A(validIn),
    .B(In2[0]),
    .Y(_038_)
  );
  NOT _125_ (
    .A(_038_),
    .Y(data_mux2[0])
  );
  NAND _126_ (
    .A(validIn),
    .B(In2[1]),
    .Y(_039_)
  );
  NOT _127_ (
    .A(_039_),
    .Y(data_mux2[1])
  );
  NAND _128_ (
    .A(validIn),
    .B(In2[2]),
    .Y(_040_)
  );
  NOT _129_ (
    .A(_040_),
    .Y(data_mux2[2])
  );
  NAND _130_ (
    .A(validIn),
    .B(In2[3]),
    .Y(_041_)
  );
  NOT _131_ (
    .A(_041_),
    .Y(data_mux2[3])
  );
  NAND _132_ (
    .A(validIn),
    .B(In2[4]),
    .Y(_042_)
  );
  NOT _133_ (
    .A(_042_),
    .Y(data_mux2[4])
  );
  NAND _134_ (
    .A(validIn),
    .B(In2[5]),
    .Y(_043_)
  );
  NOT _135_ (
    .A(_043_),
    .Y(data_mux2[5])
  );
  NAND _136_ (
    .A(validIn),
    .B(In2[6]),
    .Y(_044_)
  );
  NOT _137_ (
    .A(_044_),
    .Y(data_mux2[6])
  );
  NAND _138_ (
    .A(validIn),
    .B(In2[7]),
    .Y(_045_)
  );
  NOT _139_ (
    .A(_045_),
    .Y(data_mux2[7])
  );
  NOR _140_ (
    .A(validIn),
    .B(_006_),
    .Y(data_Probador2[0])
  );
  NOR _141_ (
    .A(validIn),
    .B(_007_),
    .Y(data_Probador2[1])
  );
  NOR _142_ (
    .A(validIn),
    .B(_008_),
    .Y(data_Probador2[2])
  );
  NOR _143_ (
    .A(validIn),
    .B(_009_),
    .Y(data_Probador2[3])
  );
  NOR _144_ (
    .A(validIn),
    .B(_010_),
    .Y(data_Probador2[4])
  );
  NOR _145_ (
    .A(validIn),
    .B(_011_),
    .Y(data_Probador2[5])
  );
  NOR _146_ (
    .A(validIn),
    .B(_012_),
    .Y(data_Probador2[6])
  );
  NOR _147_ (
    .A(validIn),
    .B(_013_),
    .Y(data_Probador2[7])
  );
  NAND _148_ (
    .A(validIn),
    .B(In1[0]),
    .Y(_046_)
  );
  NOT _149_ (
    .A(_046_),
    .Y(data_mux1[0])
  );
  NAND _150_ (
    .A(validIn),
    .B(In1[1]),
    .Y(_047_)
  );
  NOT _151_ (
    .A(_047_),
    .Y(data_mux1[1])
  );
  NAND _152_ (
    .A(validIn),
    .B(In1[2]),
    .Y(_048_)
  );
  NOT _153_ (
    .A(_048_),
    .Y(data_mux1[2])
  );
  NAND _154_ (
    .A(validIn),
    .B(In1[3]),
    .Y(_049_)
  );
  NOT _155_ (
    .A(_049_),
    .Y(data_mux1[3])
  );
  NAND _156_ (
    .A(validIn),
    .B(In1[4]),
    .Y(_050_)
  );
  NOT _157_ (
    .A(_050_),
    .Y(data_mux1[4])
  );
  NAND _158_ (
    .A(validIn),
    .B(In1[5]),
    .Y(_051_)
  );
  NOT _159_ (
    .A(_051_),
    .Y(data_mux1[5])
  );
  NAND _160_ (
    .A(validIn),
    .B(In1[6]),
    .Y(_052_)
  );
  NOT _161_ (
    .A(_052_),
    .Y(data_mux1[6])
  );
  NAND _162_ (
    .A(validIn),
    .B(In1[7]),
    .Y(_053_)
  );
  NOT _163_ (
    .A(_053_),
    .Y(data_mux1[7])
  );
  NOR _164_ (
    .A(validIn),
    .B(_014_),
    .Y(data_Probador1[0])
  );
  NOR _165_ (
    .A(validIn),
    .B(_015_),
    .Y(data_Probador1[1])
  );
  NOR _166_ (
    .A(validIn),
    .B(_016_),
    .Y(data_Probador1[2])
  );
  NOR _167_ (
    .A(validIn),
    .B(_017_),
    .Y(data_Probador1[3])
  );
  NOR _168_ (
    .A(validIn),
    .B(_018_),
    .Y(data_Probador1[4])
  );
  NOR _169_ (
    .A(validIn),
    .B(_019_),
    .Y(data_Probador1[5])
  );
  NOR _170_ (
    .A(validIn),
    .B(_020_),
    .Y(data_Probador1[6])
  );
  NOR _171_ (
    .A(validIn),
    .B(_021_),
    .Y(data_Probador1[7])
  );
  NAND _172_ (
    .A(validIn),
    .B(In0[0]),
    .Y(_054_)
  );
  NOT _173_ (
    .A(_054_),
    .Y(data_mux0[0])
  );
  NAND _174_ (
    .A(validIn),
    .B(In0[1]),
    .Y(_055_)
  );
  NOT _175_ (
    .A(_055_),
    .Y(data_mux0[1])
  );
  NAND _176_ (
    .A(validIn),
    .B(In0[2]),
    .Y(_056_)
  );
  NOT _177_ (
    .A(_056_),
    .Y(data_mux0[2])
  );
  NAND _178_ (
    .A(validIn),
    .B(In0[3]),
    .Y(_057_)
  );
  NOT _179_ (
    .A(_057_),
    .Y(data_mux0[3])
  );
  NAND _180_ (
    .A(validIn),
    .B(In0[4]),
    .Y(_058_)
  );
  NOT _181_ (
    .A(_058_),
    .Y(data_mux0[4])
  );
  NAND _182_ (
    .A(validIn),
    .B(In0[5]),
    .Y(_059_)
  );
  NOT _183_ (
    .A(_059_),
    .Y(data_mux0[5])
  );
  NAND _184_ (
    .A(validIn),
    .B(In0[6]),
    .Y(_060_)
  );
  NOT _185_ (
    .A(_060_),
    .Y(data_mux0[6])
  );
  NAND _186_ (
    .A(validIn),
    .B(In0[7]),
    .Y(_061_)
  );
  NOT _187_ (
    .A(_061_),
    .Y(data_mux0[7])
  );
  NOR _188_ (
    .A(validIn),
    .B(_022_),
    .Y(data_Probador0[0])
  );
  NOR _189_ (
    .A(validIn),
    .B(_023_),
    .Y(data_Probador0[1])
  );
  NOR _190_ (
    .A(validIn),
    .B(_024_),
    .Y(data_Probador0[2])
  );
  NOR _191_ (
    .A(validIn),
    .B(_025_),
    .Y(data_Probador0[3])
  );
endmodule

(* top =  1  *)
(* src = "phy_tx_estruct.v:4.1-102.10" *)
module phy_tx_estruct(In0, In1, In2, In3, clk, clk2, clk4, valid0, valid1, valid2, valid3, validIn, reset, data_out_estruct, valid_out_estruct, data_Probador0, data_Probador1, data_Probador2, data_Probador3);
  (* src = "phy_tx_estruct.v:5.17-5.20" *)
  input [7:0] In0;
  (* src = "phy_tx_estruct.v:30.12-30.20" *)
  wire [7:0] In0_good;
  (* src = "phy_tx_estruct.v:6.17-6.20" *)
  input [7:0] In1;
  (* src = "phy_tx_estruct.v:30.22-30.30" *)
  wire [7:0] In1_good;
  (* src = "phy_tx_estruct.v:7.17-7.20" *)
  input [7:0] In2;
  (* src = "phy_tx_estruct.v:30.32-30.40" *)
  wire [7:0] In2_good;
  (* src = "phy_tx_estruct.v:8.17-8.20" *)
  input [7:0] In3;
  (* src = "phy_tx_estruct.v:30.42-30.50" *)
  wire [7:0] In3_good;
  (* src = "phy_tx_estruct.v:9.11-9.14" *)
  input clk;
  (* src = "phy_tx_estruct.v:10.11-10.15" *)
  input clk2;
  (* src = "phy_tx_estruct.v:11.11-11.15" *)
  input clk4;
  (* src = "phy_tx_estruct.v:19.18-19.32" *)
  output [7:0] data_Probador0;
  (* src = "phy_tx_estruct.v:20.18-20.32" *)
  output [7:0] data_Probador1;
  (* src = "phy_tx_estruct.v:21.18-21.32" *)
  output [7:0] data_Probador2;
  (* src = "phy_tx_estruct.v:22.18-22.32" *)
  output [7:0] data_Probador3;
  (* src = "phy_tx_estruct.v:15.18-15.37" *)
  output [7:0] data_out_estruct;
  (* src = "phy_tx_estruct.v:27.12-27.21" *)
  wire [7:0] out_temp1;
  (* src = "phy_tx_estruct.v:27.23-27.32" *)
  wire [7:0] out_temp2;
  (* src = "phy_tx_estruct.v:14.11-14.16" *)
  input reset;
  (* src = "phy_tx_estruct.v:12.11-12.17" *)
  input valid0;
  (* src = "phy_tx_estruct.v:12.19-12.25" *)
  input valid1;
  (* src = "phy_tx_estruct.v:12.27-12.33" *)
  input valid2;
  (* src = "phy_tx_estruct.v:12.35-12.41" *)
  input valid3;
  (* src = "phy_tx_estruct.v:13.11-13.18" *)
  input validIn;
  (* src = "phy_tx_estruct.v:28.6-28.17" *)
  wire valid_out_1;
  (* src = "phy_tx_estruct.v:28.19-28.30" *)
  wire valid_out_2;
  (* src = "phy_tx_estruct.v:16.12-16.32" *)
  output valid_out_estruct;
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx_estruct.v:63.14-72.2" *)
  Mux2x1_8Bits_estruct MUX2x1_1 (
    .In0(In1_good),
    .In1(In0_good),
    .clk(clk2),
    .data_out(out_temp1),
    .outValid(valid_out_1),
    .reset(reset),
    .valid0(valid1),
    .valid1(valid0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx_estruct.v:74.14-83.2" *)
  Mux2x1_8Bits_estruct MUX2x1_2 (
    .In0(In3_good),
    .In1(In2_good),
    .clk(clk2),
    .data_out(out_temp2),
    .outValid(valid_out_2),
    .reset(reset),
    .valid0(valid3),
    .valid1(valid2)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx_estruct.v:90.14-99.2" *)
  Mux2x1_8Bits_estruct MUX2x1_3 (
    .In0(out_temp2),
    .In1(out_temp1),
    .clk(clk4),
    .data_out(data_out_estruct),
    .outValid(valid_out_estruct),
    .reset(reset),
    .valid0(valid_out_2),
    .valid1(valid_out_1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_tx_estruct.v:38.15-52.2" *)
  Recirculacion_estruct Recirculacion_testbench (
    .In0(In0),
    .In1(In1),
    .In2(In2),
    .In3(In3),
    .data_Probador0(data_Probador0),
    .data_Probador1(data_Probador1),
    .data_Probador2(data_Probador2),
    .data_Probador3(data_Probador3),
    .data_mux0(In0_good),
    .data_mux1(In1_good),
    .data_mux2(In2_good),
    .data_mux3(In3_good),
    .validIn(validIn)
  );
endmodule
