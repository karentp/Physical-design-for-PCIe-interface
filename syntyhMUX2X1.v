/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "Mux2x1_8Bits.v:1" *)
module Mux2x1_8Bits(In0, In1, clk, valid0, valid1, clk2, outValid, data_out);
  (* src = "Mux2x1_8Bits.v:15" *)
  wire [7:0] _000_;
  (* src = "Mux2x1_8Bits.v:27" *)
  wire _001_;
  (* src = "Mux2x1_8Bits.v:15" *)
  wire _002_;
  (* src = "Mux2x1_8Bits.v:15" *)
  wire _003_;
  (* src = "Mux2x1_8Bits.v:15" *)
  wire _004_;
  (* src = "Mux2x1_8Bits.v:15" *)
  wire _005_;
  (* src = "Mux2x1_8Bits.v:15" *)
  wire _006_;
  (* src = "Mux2x1_8Bits.v:15" *)
  wire _007_;
  (* src = "Mux2x1_8Bits.v:15" *)
  wire _008_;
  (* src = "Mux2x1_8Bits.v:15" *)
  wire _009_;
  (* src = "Mux2x1_8Bits.v:15" *)
  wire _010_;
  (* src = "Mux2x1_8Bits.v:27" *)
  wire _011_;
  (* src = "Mux2x1_8Bits.v:15" *)
  wire _012_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _013_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _014_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _015_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _016_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _017_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _018_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _019_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _020_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _021_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _022_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _023_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _024_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _025_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _026_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _027_;
  (* src = "Mux2x1_8Bits.v:2" *)
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  (* src = "Mux2x1_8Bits.v:9" *)
  wire _051_;
  (* src = "Mux2x1_8Bits.v:3" *)
  wire _052_;
  (* src = "Mux2x1_8Bits.v:3" *)
  wire _053_;
  (* src = "Mux2x1_8Bits.v:16" *)
  wire _054_;
  (* src = "Mux2x1_8Bits.v:21" *)
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  (* src = "Mux2x1_8Bits.v:16" *)
  wire _061_;
  (* src = "Mux2x1_8Bits.v:2" *)
  input [7:0] In0;
  (* src = "Mux2x1_8Bits.v:2" *)
  input [7:0] In1;
  (* src = "Mux2x1_8Bits.v:7" *)
  wire [7:0] ValorAnterior;
  (* src = "Mux2x1_8Bits.v:3" *)
  input clk;
  (* src = "Mux2x1_8Bits.v:3" *)
  input clk2;
  (* src = "Mux2x1_8Bits.v:5" *)
  output [7:0] data_out;
  (* src = "Mux2x1_8Bits.v:4" *)
  output outValid;
  (* init = 1'h0 *)
  (* src = "Mux2x1_8Bits.v:9" *)
  wire selector;
  (* src = "Mux2x1_8Bits.v:3" *)
  input valid0;
  (* src = "Mux2x1_8Bits.v:3" *)
  input valid1;
  (* src = "Mux2x1_8Bits.v:8" *)
  wire validTemp;
  NOT _062_ (
    .A(_051_),
    .Y(_011_)
  );
  NOT _063_ (
    .A(_053_),
    .Y(_030_)
  );
  NOT _064_ (
    .A(_052_),
    .Y(_031_)
  );
  NOR _065_ (
    .A(_051_),
    .B(_031_),
    .Y(_032_)
  );
  NAND _066_ (
    .A(_011_),
    .B(_052_),
    .Y(_033_)
  );
  NAND _067_ (
    .A(_013_),
    .B(_032_),
    .Y(_034_)
  );
  NAND _068_ (
    .A(_021_),
    .B(_033_),
    .Y(_035_)
  );
  NAND _069_ (
    .A(_034_),
    .B(_035_),
    .Y(_003_)
  );
  NAND _070_ (
    .A(_014_),
    .B(_032_),
    .Y(_036_)
  );
  NAND _071_ (
    .A(_022_),
    .B(_033_),
    .Y(_037_)
  );
  NAND _072_ (
    .A(_036_),
    .B(_037_),
    .Y(_004_)
  );
  NAND _073_ (
    .A(_015_),
    .B(_032_),
    .Y(_038_)
  );
  NAND _074_ (
    .A(_023_),
    .B(_033_),
    .Y(_039_)
  );
  NAND _075_ (
    .A(_038_),
    .B(_039_),
    .Y(_005_)
  );
  NAND _076_ (
    .A(_016_),
    .B(_032_),
    .Y(_040_)
  );
  NAND _077_ (
    .A(_024_),
    .B(_033_),
    .Y(_041_)
  );
  NAND _078_ (
    .A(_040_),
    .B(_041_),
    .Y(_006_)
  );
  NAND _079_ (
    .A(_017_),
    .B(_032_),
    .Y(_042_)
  );
  NAND _080_ (
    .A(_025_),
    .B(_033_),
    .Y(_043_)
  );
  NAND _081_ (
    .A(_042_),
    .B(_043_),
    .Y(_007_)
  );
  NAND _082_ (
    .A(_018_),
    .B(_032_),
    .Y(_044_)
  );
  NAND _083_ (
    .A(_026_),
    .B(_033_),
    .Y(_045_)
  );
  NAND _084_ (
    .A(_044_),
    .B(_045_),
    .Y(_008_)
  );
  NAND _085_ (
    .A(_019_),
    .B(_032_),
    .Y(_046_)
  );
  NAND _086_ (
    .A(_027_),
    .B(_033_),
    .Y(_047_)
  );
  NAND _087_ (
    .A(_046_),
    .B(_047_),
    .Y(_009_)
  );
  NAND _088_ (
    .A(_020_),
    .B(_032_),
    .Y(_048_)
  );
  NAND _089_ (
    .A(_028_),
    .B(_033_),
    .Y(_049_)
  );
  NAND _090_ (
    .A(_048_),
    .B(_049_),
    .Y(_010_)
  );
  NAND _091_ (
    .A(_051_),
    .B(_053_),
    .Y(_050_)
  );
  NAND _092_ (
    .A(_030_),
    .B(_033_),
    .Y(_012_)
  );
  NAND _093_ (
    .A(_033_),
    .B(_050_),
    .Y(_029_)
  );
  (* src = "Mux2x1_8Bits.v:27" *)
  DFF _094_ (
    .C(clk2),
    .D(validTemp),
    .Q(outValid)
  );
  (* src = "Mux2x1_8Bits.v:27" *)
  DFF _095_ (
    .C(clk2),
    .D(ValorAnterior[0]),
    .Q(data_out[0])
  );
  (* src = "Mux2x1_8Bits.v:27" *)
  DFF _096_ (
    .C(clk2),
    .D(ValorAnterior[1]),
    .Q(data_out[1])
  );
  (* src = "Mux2x1_8Bits.v:27" *)
  DFF _097_ (
    .C(clk2),
    .D(ValorAnterior[2]),
    .Q(data_out[2])
  );
  (* src = "Mux2x1_8Bits.v:27" *)
  DFF _098_ (
    .C(clk2),
    .D(ValorAnterior[3]),
    .Q(data_out[3])
  );
  (* src = "Mux2x1_8Bits.v:27" *)
  DFF _099_ (
    .C(clk2),
    .D(ValorAnterior[4]),
    .Q(data_out[4])
  );
  (* src = "Mux2x1_8Bits.v:27" *)
  DFF _100_ (
    .C(clk2),
    .D(ValorAnterior[5]),
    .Q(data_out[5])
  );
  (* src = "Mux2x1_8Bits.v:27" *)
  DFF _101_ (
    .C(clk2),
    .D(ValorAnterior[6]),
    .Q(data_out[6])
  );
  (* src = "Mux2x1_8Bits.v:27" *)
  DFF _102_ (
    .C(clk2),
    .D(ValorAnterior[7]),
    .Q(data_out[7])
  );
  (* src = "Mux2x1_8Bits.v:27" *)
  DFF _103_ (
    .C(clk2),
    .D(_001_),
    .Q(selector)
  );
  (* src = "Mux2x1_8Bits.v:15" *)
  \$_DLATCH_P_  _104_ (
    .D(_000_[0]),
    .E(_058_),
    .Q(ValorAnterior[0])
  );
  (* src = "Mux2x1_8Bits.v:15" *)
  \$_DLATCH_P_  _105_ (
    .D(_000_[1]),
    .E(_058_),
    .Q(ValorAnterior[1])
  );
  (* src = "Mux2x1_8Bits.v:15" *)
  \$_DLATCH_P_  _106_ (
    .D(_000_[2]),
    .E(_058_),
    .Q(ValorAnterior[2])
  );
  (* src = "Mux2x1_8Bits.v:15" *)
  \$_DLATCH_P_  _107_ (
    .D(_000_[3]),
    .E(_058_),
    .Q(ValorAnterior[3])
  );
  (* src = "Mux2x1_8Bits.v:15" *)
  \$_DLATCH_P_  _108_ (
    .D(_000_[4]),
    .E(_058_),
    .Q(ValorAnterior[4])
  );
  (* src = "Mux2x1_8Bits.v:15" *)
  \$_DLATCH_P_  _109_ (
    .D(_000_[5]),
    .E(_058_),
    .Q(ValorAnterior[5])
  );
  (* src = "Mux2x1_8Bits.v:15" *)
  \$_DLATCH_P_  _110_ (
    .D(_000_[6]),
    .E(_058_),
    .Q(ValorAnterior[6])
  );
  (* src = "Mux2x1_8Bits.v:15" *)
  \$_DLATCH_P_  _111_ (
    .D(_000_[7]),
    .E(_058_),
    .Q(ValorAnterior[7])
  );
  (* src = "Mux2x1_8Bits.v:15" *)
  \$_DLATCH_P_  _112_ (
    .D(_002_),
    .E(_058_),
    .Q(validTemp)
  );
  assign _021_ = In1[0];
  assign _013_ = In0[0];
  assign _000_[0] = _003_;
  assign _022_ = In1[1];
  assign _014_ = In0[1];
  assign _000_[1] = _004_;
  assign _023_ = In1[2];
  assign _015_ = In0[2];
  assign _000_[2] = _005_;
  assign _024_ = In1[3];
  assign _016_ = In0[3];
  assign _000_[3] = _006_;
  assign _025_ = In1[4];
  assign _017_ = In0[4];
  assign _000_[4] = _007_;
  assign _026_ = In1[5];
  assign _018_ = In0[5];
  assign _000_[5] = _008_;
  assign _027_ = In1[6];
  assign _019_ = In0[6];
  assign _000_[6] = _009_;
  assign _028_ = In1[7];
  assign _020_ = In0[7];
  assign _000_[7] = _010_;
  assign _051_ = selector;
  assign _058_ = _029_;
  assign _053_ = valid1;
  assign _052_ = valid0;
  assign _002_ = _012_;
  assign _001_ = _011_;
endmodule
